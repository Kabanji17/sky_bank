from unittest.mock import patch, Mock
from freezegun import freeze_time
import pytest
import pandas as pd

from src.utils import (
    read_xls_file,
    xls_to_dict,
    greetings,
    filter_transactions_by_date,
    filter_transactions_by_card,
    get_top_five_transactions,
    fetch_exchange_rates,
    fetch_stock_prices,
)



@freeze_time("2023-01-01 10:00:00")
def test_greetings_morning():
    assert greetings() == "Доброе утро"


@freeze_time("2023-01-01 15:00:00")
def test_greetings_day():
    assert greetings() == "Добрый день"


@freeze_time("2023-01-01 19:00:00")
def test_greetings_evening():
    assert greetings() == "Добрый вечер"


@freeze_time("2023-01-01 23:00:00")
def test_greetings_night():
    assert greetings() == "Доброй ночи"


@pytest.mark.parametrize("test, result",
                         [
                             ([{'Дата операции': '31.12.2021 16:44:00', 'Дата платежа': '31.12.2021',
                                'Номер карты': '*7197', 'Статус': 'OK',
                                'Сумма операции': -160.89, 'Валюта операции': 'RUB', 'Сумма платежа': -160.89,
                                'Валюта платежа': 'RUB',
                                'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                'Описание': 'Колхоз',
                                'Бонусы (включая кэшбэк)': 3, 'Округление на инвесткопилку': 0,
                                'Сумма операции с округлением': 160.89}],
                              [{'last_digits': '7197', 'total_spent': 160.89, 'cashback': 1.61}]),

                             (([{'Дата операции': '31.12.2021 16:42:04', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK',
                                 'Сумма операции': -64.0, 'Валюта операции': 'RUB', 'Сумма платежа': -64.0,
                                 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз',
                                 'Бонусы (включая кэшбэк)': 1, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 64.0}],
                               [{'cashback': 0.64, 'last_digits': '7197', 'total_spent': 64.0}]))])
def test_cards_filter(test, result):
    df = pd.DataFrame(test)
    assert filter_transactions_by_card(df) == result




@pytest.mark.parametrize("test, result",
                         [
                             ([[{'Дата операции': '31.12.2021 16:44:00', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -160.89,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -160.89, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз', 'Бонусы (включая кэшбэк)': 3, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 160.89},
                                {'Дата операции': '31.12.2021 16:42:04', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -64.0,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -64.0, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз', 'Бонусы (включая кэшбэк)': 1, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 64.0},
                                {'Дата операции': '31.12.2021 16:39:04', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -118.12,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -118.12, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Магнит', 'Бонусы (включая кэшбэк)': 2, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 118.12},
                                {'Дата операции': '31.12.2021 15:44:39', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -78.05,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -78.05, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз', 'Бонусы (включая кэшбэк)': 1, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 78.05},
                                {'Дата операции': '31.12.2021 01:23:42', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*5091', 'Статус': 'OK', 'Сумма операции': -564.0,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -564.0, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Различные товары', 'MCC': 5399.0,
                                 'Описание': 'Ozon.ru', 'Бонусы (включая кэшбэк)': 5, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 564.0},
                                {'Дата операции': '31.12.2021 00:12:53', 'Дата платежа': '31.12.2021',
                                 'Номер карты': 'Отсутствует', 'Статус': 'OK', 'Сумма операции': -800.0,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -800.0, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Переводы', 'MCC': 'Отсутствует',
                                 'Описание': 'Константин Л.', 'Бонусы (включая кэшбэк)': 0,
                                 'Округление на инвесткопилку': 0, 'Сумма операции с округлением': 800.0}],
                               [{'date': '31.12.2021 16:42:04', 'amount': -64.0, 'category': 'Супермаркеты',
                                 'description': 'Колхоз'},
                                {'date': '31.12.2021 15:44:39', 'amount': -78.05, 'category': 'Супермаркеты',
                                 'description': 'Колхоз'},
                                {'date': '31.12.2021 16:39:04', 'amount': -118.12, 'category': 'Супермаркеты',
                                 'description': 'Магнит'},
                                {'date': '31.12.2021 16:44:00', 'amount': -160.89, 'category': 'Супермаркеты',
                                 'description': 'Колхоз'},
                                {'date': '31.12.2021 01:23:42', 'amount': -564.0, 'category': 'Различные товары',
                                 'description': 'Ozon.ru'}]


                               ])])
def test_top_transaction(test, result):
    assert get_top_five_transactions(test) == result


@patch("requests.get")
def test_fetch_exchange_rates(mock_get):
    mock_response_usd = Mock()
    mock_response_usd.json.return_value = {"result": 74.5}
    mock_response_eur = Mock()
    mock_response_eur.json.return_value = {"result": 89.3}
    mock_get.side_effect = [mock_response_usd, mock_response_eur]

    result = fetch_exchange_rates(["USD", "EUR"])
    expected = [
        {"currency": "USD", "rate": 74.5},
        {"currency": "EUR", "rate": 89.3}
    ]
    assert result == expected


@patch("requests.get")
def test_fetch_stock_prices(mock_get):
    mock_response_aapl = Mock()
    mock_response_aapl.json.return_value = {
        "Time Series (Daily)": {"2024-07-25": {"4. close": {"AAPL": "150.00"}}}
    }
    mock_response_amzn = Mock()
    mock_response_amzn.json.return_value = {
        "Time Series (Daily)": {"2024-07-25": {"4. close": {"AMZN": "3300.00"}}}
    }
    mock_get.side_effect = [mock_response_aapl, mock_response_amzn]

    result = fetch_stock_prices(["AAPL", "AMZN"])
    expected = [
        {"stock": "AAPL", "price": "150.00"},
        {"stock": "AMZN", "price": "3300.00"}
    ]
    assert result == expected

